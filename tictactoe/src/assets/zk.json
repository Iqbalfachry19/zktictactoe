{"noir_version":"1.0.0-beta.6+e796dfd67726cbc28eb9991782533b211025928d","hash":"9176394534217482317","abi":{"parameters":[{"name":"game_status","type":{"kind":"integer","sign":"unsigned","width":8},"visibility":"public"},{"name":"old_board","type":{"kind":"array","length":9,"type":{"kind":"integer","sign":"unsigned","width":8}},"visibility":"private"},{"name":"new_board","type":{"kind":"array","length":9,"type":{"kind":"integer","sign":"unsigned","width":8}},"visibility":"private"},{"name":"move_pos","type":{"kind":"integer","sign":"unsigned","width":32},"visibility":"private"},{"name":"player","type":{"kind":"integer","sign":"unsigned","width":8},"visibility":"private"}],"return_type":null,"error_types":{"14225679739041873922":{"error_kind":"string","string":"Index out of bounds"}}},"bytecode":"H4sIAAAAAAAA/+1daXdTVRQ9TTrPlBZlnmeE9zK0qYACgoAiCCggyFRoEVAEAUWQUQQEREBABMR/Il/0H/iD7Ak3egjPfsneeK/1rpX10puu3X2mfc/Nu0mr5Ol4Mvj4wz2vGnyk3VVHfdlcVcJcKmEunTBXnTBXkzBXmzBXlzBXnzDX4ObSjn+DsSvl5qvd3601uA0J9jcm4DclzDUnzLUkzLUmzLUlzLUnzI1ImOswtlYZGxodz2bHo9X9nXaH05Fga6fDqnavpeT5UcqJJe4aVTbikQCsgaejJ4Fupdhx6Yn1RZe7jip3oE5MKiOQJjosG3Xncv09mf44G++OMr19hXyUy/d1F+JCnC/k92YK2Wx/IVfo6e3r7Yl641y2Px7I92YGHFZX5VhZhxWNIgWyPOEq5dmFi0WUVCDAWEf/5IOosgEpOjbHlwgcvSeaMvz+Tygsx5eFlFCpMqKVKlSnp0ZXy9/tX/lAqzQyoSzf0UzCowlZOwbIkWX3GONgVNAUA11YVY4rKjaNDi8FjnkV0OZGGfYCEFu+Y5mExxKSYSwQa5z4LybjBC+i48RvYUo5u1H2Njk8dC6mgDY3ybAXpozlO55JeDw+GTLjgYk1QfwXpgkCF6bMBPFbmNLOblScmx0eWpjSQJubZdgLU9byncgkPBGfDNmJwMSaJP4L0ySBC1N2kvgtTNXOblScWxweWpiqgTa3yLAXppzlO5lJeDI+GXKTgYk1RfwXpikCF6bcFPFbmGqc3ag4tzo8tDDVAG1ulWEvTHnLdyqT8FR8MuSnAhNrmvgvTNMELkz5aeK3MNU6u1FxbnN4aGGqBdrcJsNemLot3+lMwtPxydA9HZhYM8R/YZohcGHqniF+C1OdsxsV53aHhxamOqDN7TLshanH8p3JJDwTnww9M4GJNUv8F6ZZAhemnlnitzDVO7tRcR7h8NDCVA+0eYQMe2EqWL6zmYRn45OhMBuYWHPEf2GaI3BhKswRv4WpwdmNinOHw0MLUwPQ5g75d4QpqmzEyPNXlu9cJuG5BNx5whWTqLJRtHuecTAI95mjwujPgjQCfdoExHpFwixWJG/Ldz6T8HwC7gLxu1jV7gXGwSBcarEiC6wZiBVJmMWK5G35xkzCMQE3I34Xq4JmjINBuJQthXYAKizoVhgpqFmyD6PKRjEfs4TY5CRMoUKe27F880zCeQJut/gtVGp3t3EwCJfaVbQAfdoKxOqRMIsVydvyLTAJFwi4veJ3sardvcbBIFxqsSILrA2I9aqEWaxI3pbvQibhhQTcReJ3sardi4yDQbiULYB2ACos6C0AUlAXk30YVTaK+biYEJvXPM8dlt2vA2PDiLe+EZ0j2L1EwlyYkOd7LN+lTMJLCbjLxO+FSe1eZhwMwqV2ke1An44AYr0hYRYrkrflu5xJeDkBd4X4Xaxq9wrjYBAutViRBdYBxHpTwixWJG/LdyWT8EoC7irxu1jV7lXGwSBcStuuHYAKC3rLhxTU1WQfRpWNYj6uJsTmLc9zh2X328DYCCG39cYDcDsel7a4aD+ukTAaBeRZLuRNoXckzEYBydvyXcskvJaAu078bhTU7nXGwSDcYO66Irfz70qYxYrkbfmuZxJeT8DdIH4Xq9q9wTgYhEs7y6XCgu58kIK6kezDqLJRzMeNhNi853nusOx+HxgbIeS2LkbAHVesu5g1BD9ukjAXOuS3nlq+m5mENxNwt4jfC53avcU4GIQbzCcMkEeVPpAwixXJ2/LdyiS8lYC7TfwuVrV7m3EwCDeYs4DIm0wfSpjFiuRt+W5nEt5OwN0hfher2r3DOBiES9kGaAegwoJus5GCupPsw6iyUczHnYTY7PI8d1h27wbGRgi5rTcygNv7WLfMmwh+7JMwFzrk99NbvnuYhPcQcPeK3wud2r3XOBiES+1KkR8sR35CpV/CLFYkb8t3gEl4gIC7T/wuVrV7n3EwCJdarMgCQ54t/EjCLFYkb8t3P5PwfgLuAfG7WNXuA8bBIFzKNkA7ABUWdJuNFNSDZB9GlY1iPh4kxOZjz3OHZfcnwNgIIbf1RsYuIJ5umfsIfjwkYTQKyLOFyPetP5UwGwUkb8v3MJPwYQLuEfG7UVC7jxgHg3CDuTGE7Oo/kzCLFcnb8j3KJHyUgHtM/C5WtfuYcTAIl3a2UIUF3fkgBfU42YdRZaOYj8cJsfnc89xh2f0FMDZCyG19bxm444p1F3OI4McTEkajgHyvHtl0fClhNgpI3pbvSSbhkwTcU+J3o6B2nzIOBuEG09UjPzH0lYRZrEjelu9pJuHTBNwz4nexqt1njINBuLT36lVY0J0PUlDPkn0YVTaK+XiWEJtznucOy+7zwNiIcI57AXdcse5iThD8eEE4jUIKzBN5qulrcO6gtULfRdEjtmmwD5H/awj5QaWL4HiwchD5Re3feJ6DWiMXBa83l3AcX2hj3QrkbfleZhK+TMC9AkwGlt1XjINBuNTFDenTb8VvYVHhuyR4YbkqYQpLm3CE5RqT8DUC7nXxW1jU7uvGwSBcqrAgffqd+C0sKnxXBS8sNwKJ9TIg1veex1pz8QYh1jclzEUE+f/JLd9bTMK3CLi3xe9FRO2+bRwMwqUKC9KnP4jfwqLCd1PwwnJHwhQW5P8Xt3zvMgnfJeDeE7+FRe2+ZxwMwqUKC9KnP4rfwqLCd0fwwnIfHGvGp33PEez+1XO7zw9iXCDY/UQ4tY2+1/AT0JfAWMdI/73IhRjoz2cW4gdMwg8IuA/F74VY7X5oHAzCpXDVRfO+4EXqkYTRgCBz6WfBNiClgRbmx/LfF2ZCrWQ1Vx4RauUXsN3ogyxqN5BjrHXymOBHoM3FBbLaYXW6a5Xzbdq9VjP4qB181A0+6gcfDYMPPfSjH9LVple/C1/vReptAz2Zqu/86CZtpMMcqmnQMdpdU9LeuvW3g7/LXz8/HfXu2uCujQYjjfNFpoTfxMGP6uT50WieN5W9VrK/Wob2n/05VXYd6neHiktLwmslzJHuavmW7Ggou3YZXKAv4xJ+Jwc/MVZd5nlnmZ3W30tAHEp4pXWxRp4fqbLXSr9bXjNVeH5xOZd0wt8qjVLOdJq5kj//BLiyaLeCwgAA","debug_symbols":"pZbNbuMwDITfxeccRImUxL7KYlG4qVsEMJzATQosir77SianP4de3NOMo85HZVo2eRsep4fb8/1peTq/DHd/3oaH9TTPp+f7+Xwcr6fz0l59ez8MeLy/rtPUXhq+nLfUZVyn5TrcLbd5Pgyv43zbfujlMi6bXse1nYbDMC2PTRvw6TRP3b0fPtPh52hM4uEo/BGXXXndky8JeY2/yqewJ59KQV7DjjxT9DzHPf1xrMjzL+fvyktAfxLrT3n9Oa8pe1457skz+ldJu+bLR5735AX9a+bfzc+yI1+ZPV9lT/8UMi5AoewiUCIQiPfskDAAkr/n/7an8Xhav/3XG2Juow5DLG19m9S2e020/QkfhhRasgmZRJPU6mnC9iQm2aTYWbUn3YSNwrSdsVE4mRiFxc6MwsXEKKzbmRhF7C5iFLG7iFHE7iJGEbuLGEXsLtko2e6SjZLtLtko2e6Sey+t51xcq6v2X81hKMGVXKNrg1GrsLCruGbXzmvdls5r44oatwZXcnVeTa7sKq7Oq8W1uqqpBpujZHM0uiZXtjkqrv5+tRhfq6u/XwoBhmwChQiTYBhGbHrbCBvX9gGmwoBMIBPBRBiQCWQSmAzjjRKBTOomBhhvlWKESTBeLEWByTAFxsul6O1SXw0zaKOvx3aN5A1TXxEzAuMlUyowFQZtMNpgtMFog9EGow1GG4w2GG0w2mC0IWhDQBaQJcGgDQFZQJYCgzb6Um2zMsiZYCIMyBnkjJ4zes4gZ5Azei7oeduzPquAXNBzQc/bruVuMkyBqTDqZlu4zRBMhEkwDANyBbmCXEGuICvICrKCrCAryAqygqwgK8jq5BgCTCeXbiJMgmEYgckwBabCqJttBzfTyf2j63VcT+PDPPl346fbcvzyVfn674ITfJm+rOfj9Hhbp/4Bs521j5z/","file_map":{"50":{"source":"fn main(\n    // Public inputs\n    game_status: pub u8,\n    // Private inputs\n    old_board: [u8; 9],\n    new_board: [u8; 9],\n    move_pos: u32,\n    player: u8, // 1 or 2\n) {\n    // 1. Langkah valid: cell kosong di old_board\n    assert(old_board[move_pos] == 0);\n    assert(new_board[move_pos] == player);\n\n    // 2. Pastikan semua cell lain sama\n    for i in 0..9 {\n        if i != move_pos {\n            assert(old_board[i] == new_board[i]);\n        }\n    }\n\n    // 3. Validasi status\n    let status = compute_status(new_board);\n    assert(status == game_status);\n}\nfn compute_status(board: [u8; 9]) -> u8 {\n    let lines = [\n        [0, 1, 2], [3, 4, 5], [6, 7, 8], // rows\n        [0, 3, 6], [1, 4, 7], [2, 5, 8], // cols\n        [0, 4, 8], [2, 4, 6], // diagonals\n    ];\n    let mut winner: u8 = 0;\n\n    for line in lines {\n        let a = board[line[0]];\n        let b = board[line[1]];\n        let c = board[line[2]];\n        if (a != 0) & (a == b) & (b == c) {\n            winner = a;\n        }\n    }\n\n    let mut full = true;\n    for i in 0..9 {\n        if board[i] == 0 {\n            full = false;\n        }\n    }\n\n    if winner != 0 {\n        winner\n    } else if full {\n        3 // draw\n    } else {\n        0 // ongoing\n    }\n}\n#[test]\nfn test_main() {\n    let old_board: [u8; 9] = [0; 9];\n    let mut new_board = old_board;\n    let move_pos: u32 = 0;\n    let player: u8 = 1;\n\n    new_board[move_pos] = player;\n\n    let game_status: u8 = compute_status(new_board);\n\n    main(game_status, old_board, new_board, move_pos, player);\n}\n#[test]\nfn test_second_move() {\n    // X di pos 0\n    let mut board_step1 = [0; 9];\n    board_step1[0] = 1;\n\n    let mut board_step2 = board_step1;\n    let move_pos: u32 = 1; // O di pos 1\n    let player: u8 = 2;\n    board_step2[move_pos] = player;\n\n    let status = compute_status(board_step2);\n    main(status, board_step1, board_step2, move_pos, player);\n}\n#[test]\nfn test_third_move() {\n    // X di 0, O di 1\n    let mut board_step2 = [0; 9];\n    board_step2[0] = 1;\n    board_step2[1] = 2;\n\n    let mut board_step3 = board_step2;\n    let move_pos: u32 = 2; // X di pos 2\n    let player: u8 = 1;\n    board_step3[move_pos] = player;\n\n    let status = compute_status(board_step3);\n    main(status, board_step2, board_step3, move_pos, player);\n}\n#[test]\nfn test_fourth_move() {\n    // X di 0, X di 2, O di 1\n    let mut board_step3 = [0; 9];\n    board_step3[0] = 1;\n    board_step3[1] = 2;\n    board_step3[2] = 1;\n\n    let mut board_step4 = board_step3;\n    let move_pos: u32 = 3; // O di pos 3\n    let player: u8 = 2;\n    board_step4[move_pos] = player;\n\n    let status = compute_status(board_step4);\n    main(status, board_step3, board_step4, move_pos, player);\n}\n#[test]\nfn test_fifth_move_win() {\n    // X: 0, 2 ; O: 1, 3\n    let mut board_step4 = [0; 9];\n    board_step4[0] = 1; // X\n    board_step4[1] = 2; // X\n    board_step4[3] = 1; // X\n    // O di mana pun tidak ganggu diag\n    board_step4[1] = 2;\n\n    let mut board_step5 = board_step4;\n    let move_pos: u32 = 6; // X di pos 8 bikin diag [0,4,8] full X\n    let player: u8 = 1;\n    board_step5[move_pos] = player;\n\n    let status = compute_status(board_step5);\n    assert(status == 1); // X menang\n    main(status, board_step4, board_step5, move_pos, player);\n}\n#[test]\nfn test_o_win() {\n    let mut board_step4 = [0; 9];\n    board_step4[1] = 2; // O\n    board_step4[4] = 2; // O\n    // X di posisi lain tidak ganggu col\n    board_step4[0] = 1;\n    board_step4[2] = 1;\n\n    let mut board_step5 = board_step4;\n    let move_pos: u32 = 7; // O di pos 7 -> [1,4,7] full O\n    let player: u8 = 2;\n    board_step5[move_pos] = player;\n    let status = compute_status(board_step5);\n    assert(status == 2); // O menang\n    main(status, board_step4, board_step5, move_pos, player);\n}\n#[test]\nfn test_draw() {\n    let mut old_board = [1, 2, 1, 1, 2, 2, 2, 1, 0]; // pos 8 kosong\n    let mut new_board = old_board;\n    let move_pos: u32 = 8;\n    let player: u8 = 1;\n    new_board[move_pos] = player;\n\n    let status = compute_status(new_board);\n    assert(status == 3); // seri\n\n    main(status, old_board, new_board, move_pos, player);\n}\n#[test]\nfn test_x_win_sequence() {\n    let mut board = [0; 9];\n\n    // Step 1: X di pos 0\n    let mut new_board = board;\n    new_board[0] = 1;\n    main(compute_status(new_board), board, new_board, 0, 1);\n    board = new_board;\n\n    // Step 2: O di pos 1\n    let mut new_board = board;\n    new_board[1] = 2;\n    main(compute_status(new_board), board, new_board, 1, 2);\n    board = new_board;\n\n    // Step 3: X di pos 4\n    let mut new_board = board;\n    new_board[4] = 1;\n    main(compute_status(new_board), board, new_board, 4, 1);\n    board = new_board;\n\n    // Step 4: O di pos 2\n    let mut new_board = board;\n    new_board[2] = 2;\n    main(compute_status(new_board), board, new_board, 2, 2);\n    board = new_board;\n\n    // Step 5: X di pos 8\n    let mut new_board = board;\n    new_board[8] = 1;\n    let status = compute_status(new_board);\n    assert(status == 1); // X menang\n    main(status, board, new_board, 8, 1);\n}\n","path":"/Users/iqbalfachry/kode/foundry/tictactoe/zk/src/main.nr"}},"names":["main"],"brillig_names":["directive_integer_quotient","directive_invert"]}